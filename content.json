{"meta":{"title":"dankan108","subtitle":null,"description":null,"author":"dankan108","url":"http://yoursite.com"},"pages":[{"title":"分类","date":"2017-05-05T09:42:55.000Z","updated":"2017-05-05T10:32:04.104Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-05-05T09:41:59.000Z","updated":"2017-05-05T10:08:43.991Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"自定义滚动条  自定义进度条","slug":"gundongtiao","date":"2017-05-09T04:11:58.000Z","updated":"2017-05-09T05:09:06.504Z","comments":true,"path":"2017/05/09/gundongtiao/","link":"","permalink":"http://yoursite.com/2017/05/09/gundongtiao/","excerpt":"","text":"自定义滚动条调用1new ScrollBar('tip','scrollBar','section','article'); 具体见 https://github.com/dankan108/webpage-collect/tree/master/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1 自定义进度条调用12var a = new Progress('d1',100,20,'out');a.fill(30);//进度条数值 具体见 https://github.com/dankan108/webpage-collect/tree/master/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%9B%E5%BA%A6%E6%9D%A1","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"ejs在客户端使用","slug":"ejs","date":"2017-05-07T11:46:21.000Z","updated":"2017-05-07T12:00:39.246Z","comments":true,"path":"2017/05/07/ejs/","link":"","permalink":"http://yoursite.com/2017/05/07/ejs/","excerpt":"ejs模板引入文件12&lt;script src=\"./bower_components/jquery/dist/jquery.min.js\"&gt;&lt;/script&gt;&lt;script src=\"./bower_components/ejs/ejs.min.js\"&gt;&lt;/script&gt;","text":"ejs模板引入文件12&lt;script src=\"./bower_components/jquery/dist/jquery.min.js\"&gt;&lt;/script&gt;&lt;script src=\"./bower_components/ejs/ejs.min.js\"&gt;&lt;/script&gt; 编写主题 12345678&lt;div id=\"show\"&gt;&lt;/div&gt;&lt;script type=\"text/html\" id=\"module\"&gt; &lt;% data.map(function(item)&#123; %&gt; &lt;h2&gt;&lt;%=item.header%&gt;&lt;/h2&gt; &lt;p&gt;&lt;%=item.paragraph%&gt;&lt;/p&gt; &lt;% &#125;) %&gt;&lt;/script&gt; 渲染json1234var data = [ &#123; \"header\":\"Hello\", \"paragraph\":\"This is hello\" &#125;, &#123; \"header\":\"World\", \"paragraph\":\"This is world\" &#125; ,&#123;\"header\":\"aa\",\"paragraph\":\"adadasdaaad\"&#125;];var html = ejs.render($(\"#module\").html(),&#123;data:data&#125;);$('#show').append(html); ajax1234567891011121314151617181920212223242526272829303132333435363738394041//-&gt;使用jQuery的AJAX获取数据 $.ajax(&#123; url:'/getMenu', type:'get', dataType:'json', success:function(data)&#123; //-&gt;data:就是我们从服务器获取的数据,然后执行第四步的bindHTML方法 bindHTML(data); &#125; &#125;); //-&gt;假设我们获取的数据格式如下 [ &#123; \"name\": \"NBA\", \"tag\": \"nba\", \"columnId\": 100000 &#125;, &#123; \"name\": \"欧洲杯\", \"tag\": \"ec\", \"columnId\": 3 &#125;, &#123; \"name\": \"中超\", \"tag\": \"csl\", \"columnId\": 208 &#125; ... ] function bindHTML(data)&#123; //-&gt;首先把页面中模板的innerHTML获取到 var str=$(\"#menuTemplate\").html(); //-&gt;然后把str和data交给EJS解析处理，得到我们最终想要的字符串 var result=ejs.render(str, &#123;data: data&#125;); //-&gt;最后把获取的HTML放入到MENU中 &#125;","categories":[],"tags":[{"name":"ejs","slug":"ejs","permalink":"http://yoursite.com/tags/ejs/"}]},{"title":"简单的选项卡组件","slug":"xuanxiangka","date":"2017-05-07T05:40:06.000Z","updated":"2017-05-07T06:25:31.818Z","comments":true,"path":"2017/05/07/xuanxiangka/","link":"","permalink":"http://yoursite.com/2017/05/07/xuanxiangka/","excerpt":"调用1234var t1 = new Tab();t1.init('div1',&#123; event:'mouseover'&#125;);","text":"调用1234var t1 = new Tab();t1.init('div1',&#123; event:'mouseover'&#125;); 一个简单的选项卡组件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152function Tab()&#123; this.oParent = null; this.aInput = null; this.aDiv = null; this.settings = &#123; event:'click', delay: 200 &#125;&#125;Tab.prototype.init = function(oParent , opt)&#123; this.oParent = document.getElementById(oParent); this.aInput = this.oParent.getElementsByTagName('input'); this.aDiv = this.oParent.getElementsByTagName('div'); extend(this.settings,opt);//配置参数替代默认参数 var This = this; var timer =null;//用于事件为mouseover时设置定时器 for(var i=0;i&lt;this.aInput.length;i++)&#123; this.aInput[i].index = i; //绑定事件 显示隐藏 this.aInput[i].addEventListener(This.settings.event,function()&#123; if( This.settings.event == 'mouseover' &amp;&amp; This.settings.delay )&#123; var _self = this; timer = setTimeout(function()&#123; This.change(_self); &#125;,This.settings.delay); &#125; else&#123; This.change(this); &#125; &#125;,false); //mouseover情况下清除定时器 this.aInput[i].addEventListener('mouseout',function()&#123; clearTimeout(timer); &#125;,false); &#125;&#125;;Tab.prototype.change = function(obj)&#123; for(var i=0;i&lt;this.aInput.length;i++)&#123; this.aInput[i].className = ''; this.aDiv[i].style.display = 'none'; &#125; obj.className = 'active'; this.aDiv[obj.index].style.display = 'block';&#125;;function extend(obj1,obj2)&#123; for(var attr in obj2)&#123; obj1[attr] = obj2[attr]; &#125;&#125; jq的简单选项卡123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384function Tab()&#123; this.oParent = null; this.aInput = null; this.aDiv = null; this.iNow = 0; this.settings = &#123; //默认参数 event : 'click', delay : 0 &#125;;&#125;Tab.prototype.init = function(oParent , opt)&#123; $.extend( this.settings , opt ); this.oParent = $('#'+oParent); this.aInput = this.oParent.find('input'); this.aDiv = this.oParent.find('div'); this.change(); &#125;;Tab.prototype.change = function()&#123; var This = this; var timer = null; this.aInput.on(this.settings.event,function()&#123; var _this = this; if( This.settings.event == 'mouseover' &amp;&amp; This.settings.delay )&#123; timer = setTimeout(function()&#123; show(_this); &#125;,This.settings.delay); &#125; else&#123; show(this); &#125; &#125;).mouseout(function()&#123; clearTimeout(timer); &#125;); function show(obj)&#123; $(This).trigger('beforeClick');//触发点击前事件 This.aInput.attr('class',''); This.aDiv.css('display','none'); $(obj).attr('class','active'); This.aDiv.eq( $(obj).index() ).css('display','block'); This.iNow = $(obj).index(); $(This).trigger('afterClick');//触发点击后事件 &#125; &#125;;Tab.prototype.nowSel = function(index)&#123;//设置初始显示的选项卡index this.aInput.attr('class',''); this.aDiv.css('display','none'); this.aInput.eq(index).attr('class','active'); this.aDiv.eq(index).css('display','block'); this.iNow = index; &#125;;Tab.prototype.getContent = function()&#123; return this.aDiv.eq(this.iNow).html(); &#125;;","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"原型链有关方法","slug":"yuanxinlian","date":"2017-05-06T23:25:41.000Z","updated":"2017-05-06T23:52:42.808Z","comments":true,"path":"2017/05/07/yuanxinlian/","link":"","permalink":"http://yoursite.com/2017/05/07/yuanxinlian/","excerpt":"hasOwnPropertyhasOwnProperty : 看是不是对象自身下面的属性自身的返回true 原型链下的返回falseconstructor 每个函数都会有，都是自动生成的instanceof : 对象与构造函数在原型链上是否有关系toString() :把对象转成字符串 系统对象下面都是自带的 , 自己写的对象都是通过原型链找object下面的","text":"hasOwnPropertyhasOwnProperty : 看是不是对象自身下面的属性自身的返回true 原型链下的返回falseconstructor 每个函数都会有，都是自动生成的instanceof : 对象与构造函数在原型链上是否有关系toString() :把对象转成字符串 系统对象下面都是自带的 , 自己写的对象都是通过原型链找object下面的 利用他们作类型判断123alert(arr.constructor ==Array);alert(arr instanceof Array);alert(Object.prototype.toString.call(arr) == '[object Array]');","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"继承","slug":"继承","date":"2017-05-06T23:07:56.000Z","updated":"2017-05-06T23:29:23.215Z","comments":true,"path":"2017/05/07/继承/","link":"","permalink":"http://yoursite.com/2017/05/07/继承/","excerpt":"对于面向对象的继承第一种继承1.方法函数 深度复制对象12345function extend(obj1,obj2)&#123; for(var attr in obj2)&#123; obj1[attr] = obj2[attr]; &#125;&#125;","text":"对于面向对象的继承第一种继承1.方法函数 深度复制对象12345function extend(obj1,obj2)&#123; for(var attr in obj2)&#123; obj1[attr] = obj2[attr]; &#125;&#125; 2.原有对象CreatePerson 用CreateStar继承他并新增属性12345678910111213function CreatePerson(name,sex)&#123; this.name = name; this.sex = sex;&#125;CreatePerson.prototype.showNaem = function()&#123; alert(this.name);&#125;function CreateStar(name,sex,job)&#123; CreatePerson.call(this,name,sex); 复制属性 this.job = job; &#125;extend(CreateStar.prototype,CreatePerson.prototype); //方法的继承 第二种继承 类式继承1234567891011121314151617function CreatePerson(name,sex)&#123; this.name = name; this.sex = sex;&#125;CreatePerson.prototype.showNaem = function()&#123; alert(this.name);&#125;function CreateStar(name,sex,job)&#123; CreatePerson.call(this,name,sex); 复制属性 this.job = job; &#125;//方法的继承var F= function()&#123;&#125;;F.prototype = CreatePerson.prototype;CreateStar.prototype = new F();CreateStar.prototype.constructor = CreateStar//修正指向 第三种继承 原型继承12345function cloneObj(obj)&#123; var F = function()&#123;&#125;; F.prototype = obj; return new F(); &#125;","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"面向对象的拖拽 第二种","slug":"drag2","date":"2017-05-06T12:09:16.000Z","updated":"2017-05-07T06:32:04.603Z","comments":true,"path":"2017/05/06/drag2/","link":"","permalink":"http://yoursite.com/2017/05/06/drag2/","excerpt":"面向对象的拖拽dom 元素运动1.改变top left2.translate 不会引起页面重绘","text":"面向对象的拖拽dom 元素运动1.改变top left2.translate 不会引起页面重绘 获取transform兼容写法123456789101112131415// 获取transform兼容写法 function getTransform()&#123; var transform = &apos;&apos;, divStyle = document.createElement(&apos;div&apos;).style, transformArr =[&apos;transform&apos;,&apos;webkitTransform&apos;,&apos;MozTransform&apos;,&apos;msTransfrom&apos;,&apos;OTransform&apos;], i = 0, len = transformArr.length; for(;i&lt;len;i++)&#123; if(transformArr[i] in divStyle)&#123; return transform = transformArr[i]; &#125; &#125; return transform; &#125; 获取元素的样式属性1234function getStyle(elem,property)&#123; //ie通过currentStyle 其他通过getComputedStyle return document.defaultView.getComputedStyle?document.defaultView.getComputedStyle(elem,false)[property]:elem.currentStyle[property];&#125; 获取元素的当前位置12345678910111213141516171819202122232425262728function getTargetPos(elem)&#123; var pos = &#123;x:0,y:0&#125;; var transform = getTransform(); if(transform)&#123; var transformValue = getStyle(elem,transform); if(transformValue == &apos;none&apos;)&#123; elem.style[transform] = &apos;translate(0,0)&apos;; return pos; &#125;else&#123; var temp = transformValue.match(/-?\\d+/g); return pos = &#123; x:parseInt(temp[4].trim()), y:parseInt(temp[5].trim()) &#125; &#125; &#125;else&#123; if(getStyle(elem,&apos;position&apos;) == &apos;static&apos;)&#123; elem.style.position = &apos;relative&apos;; return pos; &#125;else&#123; var x = parseInt(getStyle(elem,&apos;left&apos;)?getStyle(elem,&apos;left&apos;):0); var y = parseInt(getStyle(elem,&apos;top&apos;)?getStyle(elem,&apos;top&apos;):0); return pos = &#123; x:x, y:y &#125; &#125; &#125; &#125; 设置元素位置12345678910function setTargetPos(elem,pos)&#123; var transform =getTransform(); if(transform)&#123; elem.style[transform] = 'translate('+pos.x+'px,'+pos.y+'px)'; &#125;else&#123; elem.style.left = pos.x +'px'; elem.style.top = pos.y +'px'; &#125; return elem;&#125; 源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131(function() &#123; // 这是一个私有属性，不需要被实例访问 var transform = getTransform(); function Drag(selector) &#123; // 放在构造函数中的属性，都是属于每一个实例单独拥有 this.elem = typeof selector == 'Object' ? selector : document.getElementById(selector); this.startX = 0; this.startY = 0; this.sourceX = 0; this.sourceY = 0; this.init(); &#125; // 原型 Drag.prototype = &#123; constructor: Drag, init: function() &#123; // 初始时需要做些什么事情 this.setDrag(); &#125;, // 稍作改造，仅用于获取当前元素的属性，类似于getName getStyle: function(property) &#123; return document.defaultView.getComputedStyle ? document.defaultView.getComputedStyle(this.elem, false)[property] : this.elem.currentStyle[property]; &#125;, // 用来获取当前元素的位置信息，注意与之前的不同之处 getPosition: function() &#123; var pos = &#123;x: 0, y: 0&#125;; if(transform) &#123; var transformValue = this.getStyle(transform); if(transformValue == 'none') &#123; this.elem.style[transform] = 'translate(0, 0)'; &#125; else &#123; var temp = transformValue.match(/-?\\d+/g); pos = &#123; x: parseInt(temp[4].trim()), y: parseInt(temp[5].trim()) &#125; &#125; &#125; else &#123; if(this.getStyle('position') == 'static') &#123; this.elem.style.position = 'relative'; &#125; else &#123; pos = &#123; x: parseInt(this.getStyle('left') ? this.getStyle('left') : 0), y: parseInt(this.getStyle('top') ? this.getStyle('top') : 0) &#125; &#125; &#125; return pos; &#125;, // 用来设置当前元素的位置 setPostion: function(pos) &#123; if(transform) &#123; this.elem.style[transform] = 'translate('+ pos.x +'px, '+ pos.y +'px)'; &#125; else &#123; this.elem.style.left = pos.x + 'px'; this.elem.style.top = pos.y + 'px'; &#125; &#125;, // 该方法用来绑定事件 setDrag: function() &#123; var self = this; this.elem.addEventListener('mousedown', start, false); function start(event) &#123; self.startX = event.pageX; self.startY = event.pageY; var pos = self.getPosition(); self.sourceX = pos.x; self.sourceY = pos.y; document.addEventListener('mousemove', move, false); document.addEventListener('mouseup', end, false); &#125; function move(event) &#123; var currentX = event.pageX; var currentY = event.pageY; var distanceX = currentX - self.startX; var distanceY = currentY - self.startY; self.setPostion(&#123; x: (self.sourceX + distanceX).toFixed(), y: (self.sourceY + distanceY).toFixed() &#125;) &#125; function end(event) &#123; document.removeEventListener('mousemove', move); document.removeEventListener('mouseup', end); // do other things &#125; &#125; &#125; // 私有方法，仅仅用来获取transform的兼容写法 function getTransform() &#123; var transform = '', divStyle = document.createElement('div').style, transformArr = ['transform', 'webkitTransform', 'MozTransform', 'msTransform', 'OTransform'], i = 0, len = transformArr.length; for(; i &lt; len; i++) &#123; if(transformArr[i] in divStyle) &#123; return transform = transformArr[i]; &#125; &#125; return transform; &#125; // 一种对外暴露的方式 window.Drag = Drag; &#125;)(); // 使用：声明2个拖拽实例 new Drag('target'); new Drag('target2');","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"面向对象的拖拽 第一种","slug":"drag","date":"2017-05-06T11:24:03.000Z","updated":"2017-05-07T06:36:30.228Z","comments":true,"path":"2017/05/06/drag/","link":"","permalink":"http://yoursite.com/2017/05/06/drag/","excerpt":"html对拖拽对象添加 position:absolute; 调用12345678var d2 = new Drag();d2.init(&#123; //配置参数 id : 'div2', toDown : function()&#123; document.title = 'hello'; document.body.style.background = 'black'; &#125;&#125;);","text":"html对拖拽对象添加 position:absolute; 调用12345678var d2 = new Drag();d2.init(&#123; //配置参数 id : 'div2', toDown : function()&#123; document.title = 'hello'; document.body.style.background = 'black'; &#125;&#125;); 面向对象的拖拽js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849function Drag()&#123; this.obj = null; this.disX = 0; this.disY = 0; this.settings = &#123; //默认参数 toDown : function()&#123;&#125;, toUp : function()&#123;&#125; &#125;; &#125;Drag.prototype.init = function(opt)&#123; var This = this; this.obj = document.getElementById(opt.id); extend( this.settings , opt ); this.obj.onmousedown = function(ev)&#123; var ev = ev || window.event; This.fnDown(ev); This.settings.toDown(); document.onmousemove = function(ev)&#123; var ev = ev || window.event; This.fnMove(ev); &#125;; document.onmouseup = function()&#123; This.fnUp(); This.settings.toUp(); &#125;; return false;//阻止默认事件 &#125;;&#125;;Drag.prototype.fnDown = function(ev)&#123; this.disX = ev.clientX - this.obj.offsetLeft; this.disY = ev.clientY - this.obj.offsetTop;&#125;;Drag.prototype.fnMove = function(ev)&#123; this.obj.style.left = ev.clientX - this.disX + 'px'; this.obj.style.top = ev.clientY - this.disY + 'px';&#125;;Drag.prototype.fnUp = function()&#123; document.onmousemove = null; document.onmouseup = null;&#125;;function extend(obj1,obj2)&#123; for(var attr in obj2)&#123; obj1[attr] = obj2[attr]; &#125;&#125; 如需给拖拽加限定范围，可以先继承 ，在修改方法123456789101112131415161718function ChildDrag(id)&#123; //子类 Drag.call(this,id);&#125;extend( ChildDrag.prototype , Drag.prototype );ChildDrag.prototype.fnMove = function(ev)&#123; var L = ev.clientX - this.disX; var T = ev.clientY - this.disY; if(L&lt;0)&#123; L = 0; &#125; else if(L&gt;document.documentElement.clientWidth - this.obj.offsetWidth)&#123; L = document.documentElement.clientWidth - this.obj.offsetWidth; &#125; this.obj.style.left = L + 'px'; this.obj.style.top = T + 'px';&#125;;","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"search框的css写法","slug":"search","date":"2017-05-06T10:35:10.000Z","updated":"2017-05-06T11:06:46.941Z","comments":true,"path":"2017/05/06/search/","link":"","permalink":"http://yoursite.com/2017/05/06/search/","excerpt":"今天看了一个搜索栏的网页，简单研究下使用div form 包裹input 和button html代码如下123456&lt;div class=\"search bar1\"&gt; &lt;form action=\"\"&gt; &lt;input type=\"text\" placeholder=\"shuru\"&gt; &lt;button&gt;搜索&lt;/button&gt; &lt;/form&gt;&lt;/div&gt; 对原样式进行清除123456*&#123;box-sizing: border-box;margin: 0;padding: 0;&#125;.search&#123;padding: 30px 0;&#125;form&#123;position: relative;width: 300px;margin: 0 auto;&#125;input,button&#123;border: none;outline: none;&#125;input&#123;width: 300px;height: 42px;padding-left: 13px&#125;button&#123;height: 42px;width: 62px;cursor: pointer;position: absolute;&#125;","text":"今天看了一个搜索栏的网页，简单研究下使用div form 包裹input 和button html代码如下123456&lt;div class=\"search bar1\"&gt; &lt;form action=\"\"&gt; &lt;input type=\"text\" placeholder=\"shuru\"&gt; &lt;button&gt;搜索&lt;/button&gt; &lt;/form&gt;&lt;/div&gt; 对原样式进行清除123456*&#123;box-sizing: border-box;margin: 0;padding: 0;&#125;.search&#123;padding: 30px 0;&#125;form&#123;position: relative;width: 300px;margin: 0 auto;&#125;input,button&#123;border: none;outline: none;&#125;input&#123;width: 300px;height: 42px;padding-left: 13px&#125;button&#123;height: 42px;width: 62px;cursor: pointer;position: absolute;&#125; 设置样式123456789.bar1&#123;background:#a3d0c3;&#125;.bar1 input&#123;border:2px solid #7ba7ab;border-radius:5px;background: #f9f0da;color:#9e9c9c;&#125;.bar1 button&#123;top: 0;right: 0;background: #7ba7ab;border-radius: 0 5px 5px 0;&#125;.bar1 button:before&#123; content:\"\\f002\";/*此处引入了fontawesome的css*/ font-family: FontAwesome; font-size: 16px; color:black;&#125; 引入 font-awesome &lt;link href=&quot;http://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css&quot; rel=&quot;stylesheet&quot;&gt; 源码地址https://github.com/dankan108/webpage-collect/blob/master/search/searchbar.html 截图","categories":[],"tags":[{"name":"html","slug":"html","permalink":"http://yoursite.com/tags/html/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-05-05T14:10:02.108Z","updated":"2017-05-05T09:18:44.332Z","comments":true,"path":"2017/05/05/hello-world/","link":"","permalink":"http://yoursite.com/2017/05/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"马克飞象","slug":"wode","date":"2017-05-05T10:04:10.000Z","updated":"2017-05-06T11:10:13.832Z","comments":true,"path":"2017/05/05/wode/","link":"","permalink":"http://yoursite.com/2017/05/05/wode/","excerpt":"欢迎使用马克飞象@(示例笔记本)[马克飞象|帮助|Markdown] 马克飞象是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述： 功能丰富 ：支持高亮代码块、LaTeX 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手； 得心应手 ：简洁高效的编辑器，提供桌面客户端以及离线Chrome App，支持移动端 Web； 深度整合 ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。","text":"欢迎使用马克飞象@(示例笔记本)[马克飞象|帮助|Markdown] 马克飞象是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述： 功能丰富 ：支持高亮代码块、LaTeX 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手； 得心应手 ：简洁高效的编辑器，提供桌面客户端以及离线Chrome App，支持移动端 Web； 深度整合 ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。 [TOC] Markdown简介 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。 —— 维基百科 正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为粗体或者斜体，创建一个链接或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按Ctrl + /查看帮助。 代码块12345678910@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt''' LaTeX 公式可以创建行内公式，例如 $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。或者块级公式： $$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ 表格 Item Value Qty Computer 1600 USD 5 Phone 12 USD 12 Pipe 1 USD 234 流程图12345678st=&gt;start: Starte=&gt;endop=&gt;operation: My Operationcond=&gt;condition: Yes or No?st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 以及时序图: 123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 提示：想了解更多，请查看流程图语法以及时序图语法。 复选框使用 - [ ] 和 - [x] 语法可以创建复选框，实现 todo-list 等功能。例如： [x] 已完成事项 [ ] 待办事项1 [ ] 待办事项2 注意：目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在马克飞象中修改 Markdown 原文才可生效。下个版本将会全面支持。 印象笔记相关笔记本和标签马克飞象增加了@(笔记本)[标签A|标签B]语法, 以选择笔记本和添加标签。 绑定账号后， 输入(自动会出现笔记本列表，请从中选择。 笔记标题马克飞象会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 欢迎使用马克飞象。 快捷编辑保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到马克飞象中打开并编辑该笔记。 注意：目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。 数据同步马克飞象通过将Markdown原文以隐藏内容保存在笔记中的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。 隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。 离线存储马克飞象使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过文档管理打开。 注意：虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，请务必经常及时同步到印象笔记。 编辑器相关设置右侧系统菜单（快捷键Ctrl + M）的设置中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。 快捷键帮助 Ctrl + /同步文档 Ctrl + S创建文档 Ctrl + Alt + N最大化编辑器 Ctrl + Enter预览文档 Ctrl + Alt + Enter文档管理 Ctrl + O系统菜单 Ctrl + M 加粗 Ctrl + B插入图片 Ctrl + G插入链接 Ctrl + L提升标题 Ctrl + H 关于收费马克飞象为新用户提供 10 天的试用期，试用期过后需要续费才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。 反馈与建议 微博：@马克飞象，@GGock 邮箱：&#x68;&#x75;&#x73;&#116;&#103;&#x6f;&#99;&#107;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d; 感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。 [^demo]: 这是一个示例脚注。请查阅 MultiMarkdown 文档 关于脚注的说明。 限制： 印象笔记的笔记内容使用 ENML 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致脚注和TOC无法正常点击。","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"}]}]}